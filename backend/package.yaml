# SPDX-FileCopyrightText: 2021-2022 Union
#
# SPDX-License-Identifier: AGPL-3.0-or-later

name: union
version: 0.1.0
author: Union
github: union-platform/union-app
synopsis: This is backend server for Union platform.
description: Please see the README on GitHub at <https://github.com/union-platform/union-app#readme>
category: web
copyright: 2021 Union
license: AGPL-3.0-or-later
license-file: LICENSE

extra-source-files:
  - README.md

verbatim:
  cabal-version: 2.4

# We enable all extensions that we consider harmless by default
default-extensions:
  - AllowAmbiguousTypes
  - BangPatterns
  - BlockArguments
  - ConstraintKinds
  - DataKinds
  - DefaultSignatures
  - DeriveAnyClass
  - DeriveDataTypeable
  - DeriveFoldable
  - DeriveFunctor
  - DeriveGeneric
  - DeriveTraversable
  - DerivingStrategies
  - DerivingVia
  - EmptyCase
  - FlexibleContexts
  - FlexibleInstances
  - GADTs
  - GeneralizedNewtypeDeriving
  - ImportQualifiedPost
  - InstanceSigs
  - LambdaCase
  - MultiParamTypeClasses
  - MultiWayIf
  - NamedFieldPuns
  - NegativeLiterals
  - NoImplicitPrelude
  - NumDecimals
  - OverloadedLabels
  - OverloadedStrings
  - PatternSynonyms
  - PolyKinds
  - QuasiQuotes
  - RankNTypes
  - RecordWildCards
  - RecursiveDo
  - ScopedTypeVariables
  - StandaloneDeriving
  - StrictData
  - TemplateHaskell
  - TupleSections
  - TypeApplications
  - TypeFamilies
  - TypeOperators
  - UndecidableInstances
  - UndecidableSuperClasses
  - ViewPatterns

ghc-options:
  # For details on warnings:
  # https://downloads.haskell.org/~ghc/master/users-guide/using-warnings.html

  # Warn on tabs (spaces are better)
  - -fwarn-tabs
  # Enable all warnings and disable the ones we don’t care about
  - -Weverything

  # Turns off the more strict -Wmissing-signatures
  # See https://ghc.haskell.org/trac/ghc/ticket/14794#ticket
  - -Wno-missing-exported-signatures
  # Requires explicit imports of _every_ function (e.g. ‘$’); too strict
  - -Wno-missing-import-lists
  # When GHC can’t specialize a polymorphic function. No big deal and requires
  # fixing underlying libraries to solve
  - -Wno-missed-specialisations
  # See missed-specialisations
  - -Wno-all-missed-specialisations
  # Don’t use Safe Haskell warnings
  - -Wno-unsafe
  # Don’t use Safe Haskell warnings
  - -Wno-safe
  # Warning for polymorphic local bindings; nothing wrong with those
  - -Wno-missing-local-signatures
  # Don’t warn if the monomorphism restriction is used
  - -Wno-monomorphism-restriction
  # Allow one-line do blocks
  - -Wno-unused-do-bind
  # Do not warn if Prelude is imported implicitly
  - -Wno-implicit-prelude

  # Warns when a pattern match might fail at runtime in a lambda or pattern binding
  - -Wincomplete-uni-patterns
  # Enables a warning when a record update could fail at runtime
  - -Wincomplete-record-updates
  # Will trigger when you create a record that could trigger the above warning
  - -Wpartial-fields
  # This warning will tell you when you’ve used toRational, toInteger, and
  # realToFrac, but haven’t actually changed the type (e.g. Int32 to Int32)
  - -Widentities
  # This will warn you when one of your constraints is subsumed by another
  - -Wredundant-constraints
  # This warns you for a module declaration without declaring an explicit export list
  - -Wmissing-export-lists
  # Warns about unused packages
  - -Wunused-packages

when:
  - condition: impl(ghc >= 8.10.0)
    ghc-options:
      - -Wno-prepositive-qualified-module
      - -Wno-inferred-safe-imports
      - -Wno-missing-safe-haskell-mode

dependencies:
  - base >=4.10 && < 5
  - relude >= 1.0

library:
  source-dirs: src
  generated-other-modules:
    - Paths_union
  dependencies:
    # haskell staff
    - containers
    - directory
    - filepath
    - lens
    - mtl
    - random
    - safe-exceptions
    - scientific
    - time
    - unliftio
    - unliftio-core
    - unordered-containers

    # text
    - base64-bytestring
    - regex-compat
    - text

    # monitoring
    - ekg-core
    - prometheus-client

    # database
    - hasql
    - hasql-migration
    - hasql-pool
    - hasql-transaction
    - rel8

    # http
    - aeson
    - deriving-aeson
    - http-api-data
    - http-media
    - http-types
    - jwt
    - network
    - openapi3
    - req
    - servant
    - servant-openapi3
    - servant-server
    - servant-swagger-ui
    - wai
    - warp

    # other
    - case-insensitive
    - co-log
    - optparse-applicative
    - pretty-simple
    - yaml

executables:
  union-server:
    main: Main.hs
    source-dirs: app
    ghc-options:
      - -threaded
      - -rtsopts
      - '"-with-rtsopts=-T -N"'
    dependencies:
      - union
      - with-utf8

tests:
  union-tests:
    main: Spec.hs
    source-dirs: tests
    # build-tools: tasty-discover:tasty-discover
    ghc-options:
      # Non-exhaustive patterns are ok and useful in tests
      - -Wno-incomplete-patterns
      - -Wno-incomplete-uni-patterns
      # tasty runs tests in parallel, so using multiple threads should be useful
      - -threaded
      # should be harmless, but helps some people analyse something :shrug:
      - -eventlog

      # Enable -N to use multiple threads.
      # Increase allocation area by using the recommended -A64m option.
      # Also increase the allocation area for large objects with -AL256m,
      # since this area is shared between all threads and thus with high -N
      # values get used up too soon.
      #
      # With these options tests usually run faster.
      #
      # Weird quoting is required for cabal to correctly pass this
      # as _one_ option, otherwise it splits by spaces.
      - '"-with-rtsopts=-N -A64m -AL256m"'
    dependencies:
      - union

      - tasty
      - hedgehog
      - tasty-hedgehog

      - jwt
      - mmorph
      - process
